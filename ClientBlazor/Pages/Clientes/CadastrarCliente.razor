@page "/clientes/cadastrar"
@using Application.InputModels
@using Domain.Enums
@inject IHttpClientFactory HttpClientFactory

<h3>Cadastrar Cliente</h3>

<EditForm Model="@clienteInputModel" OnValidSubmit="@HandleSubmit">
    <div class="text-success">@sucessMessage</div>
    <div class="text-danger">@failMessage</div>
    <DataAnnotationsValidator />
    <div class="form-group mb-3">
        <label for="Tipo">Tipo de Cliente:</label>
        <InputSelect @bind-Value="clienteInputModel.Tipo" class="form-control">
            @foreach (var tipo in Enum.GetValues(typeof(TipoCliente)))
            {
                <option value="@tipo">Pessoa @tipo</option>
            }
        </InputSelect>
    </div>
    @if (clienteInputModel.Tipo == TipoCliente.Jurídica)
    {
        <div class="form-group mb-3 ">
            <label for="Nome">Razão social:</label>
            <InputText id="Nome" @bind-Value="clienteInputModel.Nome" class="form-control"/>
            <ValidationMessage For="@(() => clienteInputModel.Nome)"/>
        </div>
        
        <div class="form-group mb-3">
            <label for="CNPJ">CNPJ:</label>
            <MudTextField Label="Filled" Variant="Variant.Filled" @bind-Value="clienteInputModel.Documento"  class="form-control">
            </MudTextField>
            <ValidationMessage For="@(() => clienteInputModel.Documento)"/>
        </div>
    }
    else
    {
        <div class="form-group mb-3 ">
            <label for="Nome">Nome:</label>
            <MudTextField Label="Filled" Variant="Variant.Filled" id="Nome" @bind-Value="clienteInputModel.Nome" class="form-control">
            </MudTextField>
            <ValidationMessage For="@(() => clienteInputModel.Nome)"/>
        </div>
        
        <div class="form-group mb-3">
            <label for="CPF">CPF:</label>
            <MudTextField Label="Filled" Variant="Variant.Filled" id="Nome" @bind-Value="clienteInputModel.Documento"  class="form-control">
            </MudTextField>
            <ValidationMessage For="@(() => clienteInputModel.Documento)"/>
        </div>
    }
    <div class="form-group mb-3">
        <label for="Representante">Representante:</label>
        <InputText id="Representante" @bind-Value="clienteInputModel.Representante" class="form-control"/>
        <ValidationMessage For="@(() => clienteInputModel.Representante)"/>
    </div>
    <div class="form-group mb-3">
        <label for="Email">Email:</label>
        <InputText id="Email" @bind-Value="clienteInputModel.Email" class="form-control"/>
        <ValidationMessage For="@(() => clienteInputModel.Email)"/>
    </div>
    <div class="form-group mb-3">
        <label for="Telefone">Telefone:</label>
        <MudTextField Label="Filled" Variant="Variant.Filled" id="Nome" @bind-Value="clienteInputModel.Telefone" class="form-control">
        </MudTextField>
        <ValidationMessage For="@(() => clienteInputModel.Telefone)"/>
    </div>


    <button type="submit" class="btn btn-primary mt-5">Salvar</button>
</EditForm>



@code {
    private CreateClienteInputModel clienteInputModel = new CreateClienteInputModel();
    private string? sucessMessage = "";
    private string? failMessage = "";
    private async Task HandleSubmit()
    {
        var client = HttpClientFactory.CreateClient("ApiSerad"); 
        var response = await client.PostAsJsonAsync("/api/Clientes", clienteInputModel);
        if (response.IsSuccessStatusCode)
        {
            clienteInputModel = new CreateClienteInputModel();
            sucessMessage = "Cliente criado com sucesso!";
            return;
        }

        failMessage = await response.Content.ReadAsStringAsync();
    }
}