@page "/clientes/cadastrar"
@using Application.InputModels
@using Domain.Enums
@inject IHttpClientFactory HttpClientFactory

<h3>Cadastrar Cliente</h3>

<EditForm Model="@clienteInputModel" OnValidSubmit="@HandleSubmit">
    <div class="text-success">@sucessMessage</div>
    <div class="text-danger">@failMessage</div>
    <DataAnnotationsValidator />
    <div class="form-group mb-3">
        <MudSelect 
        @bind-Value="clienteInputModel.Tipo" 
        Label="Tipo de Cliente" 
        AdornmentColor="Color.Secondary"
        Variant="Variant.Filled"
        >
            @foreach (TipoCliente item in Enum.GetValues(typeof(TipoCliente)))
            {
                <MudSelectItem Value="@item">Pessoa @item</MudSelectItem>
            }
        </MudSelect>
    </div>
    @if (clienteInputModel.Tipo == TipoCliente.Jurídica)
    {
        <div class="form-group mb-3 ">
            <MudTextField  Label="Razão social" Variant="Variant.Filled" @bind-Value="clienteInputModel.Nome"  class="form-control">
            </MudTextField>
            <ValidationMessage For="@(() => clienteInputModel.Nome)"/>
        </div>
        
        <div class="form-group mb-3">
            <MudTextField Mask="@CnpjMask"  Label="CNPJ" Variant="Variant.Filled" @bind-Value="clienteInputModel.Documento"  class="form-control">
            </MudTextField>
            <ValidationMessage For="@(() => clienteInputModel.Documento)"/>
        </div>
    }
    else
    {
        <div class="form-group mb-3 ">
            <MudTextField  Label="Nome" Variant="Variant.Filled" id="Nome" @bind-Value="clienteInputModel.Nome" class="form-control">
            </MudTextField>
            <ValidationMessage For="@(() => clienteInputModel.Nome)"/>
        </div>
        
        <div class="form-group mb-3">
            <MudTextField  Label="CPF" Variant="Variant.Filled" id="CPF" @bind-Value="clienteInputModel.Documento" class="form-control" Mask="@CpfMask">
            </MudTextField>
            <ValidationMessage For="@(() => clienteInputModel.Documento)"/>
        </div>
    }
    <div class="form-group mb-3">
        <MudTextField  Label="Nome Representante" Variant="Variant.Filled" id="Representante" @bind-Value="clienteInputModel.Representante" class="form-control">
        </MudTextField>
        <ValidationMessage For="@(() => clienteInputModel.Representante)"/>
    </div>
    <div class="form-group mb-3">
        <MudTextField  Mask="@emailMask" Label="E-mail" Variant="Variant.Filled" id="Email" @bind-Value="clienteInputModel.Email" class="form-control">
        </MudTextField>
        <p>@clienteInputModel.Email</p>
        <ValidationMessage For="@(() => clienteInputModel.Email)"/>
    </div>
    <div class="form-group mb-3">
        <MudTextField  Label="Telefone" Mask="@TelefoneMask" Variant="Variant.Filled" id="Telefone" @bind-Value="clienteInputModel.Telefone" class="form-control">
        </MudTextField>
        <ValidationMessage For="@(() => clienteInputModel.Telefone)"/> 
    </div>

    <button class="btn btn-primary mt-5" disabled="@_processing">
        @if (_processing)
        {
            <div class="d-flex justify-content-around">
                <div class="ms-1 me-2">Enviando</div>
                <MudProgressCircular Size="Size.Small" Indeterminate="true"/>
            </div>
        }
        else
        {
            <div class="d-inline-block">Salvar</div>
        }
    </button>
    
</EditForm>





@code {
    private CreateClienteInputModel clienteInputModel = new CreateClienteInputModel();
    private string? sucessMessage = "";
    private string? failMessage = "";
    private bool _processing = false;
    private PatternMask TelefoneMask = new PatternMask("(00) 00000-0000") {
            CleanDelimiters = true
    };

    private PatternMask CpfMask = new PatternMask("000.000.000-00") {
            CleanDelimiters = true
    };

    private PatternMask CnpjMask = new PatternMask("00.000.000/0000-00") {
            CleanDelimiters = true
    };

    public IMask emailMask = RegexMask.Email();


    private async Task HandleSubmit()
    {
        _processing = true;
        var client = HttpClientFactory.CreateClient("ApiSerad"); 
        var response = await client.PostAsJsonAsync("/api/Clientes", clienteInputModel);
        _processing = false;
        if (response.IsSuccessStatusCode)
        {
            clienteInputModel = new CreateClienteInputModel();
            sucessMessage = "Cliente criado com sucesso!";
            return;
        }

        failMessage = await response.Content.ReadAsStringAsync();
    }

}