@page "/clientes/cadastrar"
@using Domain.InputModels
@using Domain.Enums
@using Validators
@inject IHttpClientFactory HttpClientFactory
@using MudBlazor
@using System.Net
@using System.Text.Json
@using System.Net.Http.Json

<h3>Cadastrar Cliente</h3>
<MudCard>
    <MudText>@sucessMessage</MudText>
    <MudText>@failMessage</MudText>
    <MudForm Model="@clienteInputModel" Validation="@(clienteValidator.ValidateValue)">
        <MudCardContent>
            <MudSelect 
                @bind-Value="clienteInputModel.Tipo" 
                Label="Tipo de Cliente" 
                AdornmentColor="Color.Secondary"
                Variant="Variant.Filled"
                >
                    @foreach (TipoCliente item in Enum.GetValues(typeof(TipoCliente)))
                    {
                        <MudSelectItem Value="@item">Pessoa @item</MudSelectItem>
                    }
            </MudSelect>
            @if (clienteInputModel.Tipo == TipoCliente.Jurídica)
            {
                <MudTextField  Label="Razão social" Variant="Variant.Filled" @bind-Value="clienteInputModel.Nome"  class="form-control" For="(() => clienteInputModel.Nome)" Immediate="true"/>
                <MudTextField Mask="@CnpjMask"  Label="CNPJ" Variant="Variant.Filled" @bind-Value="clienteInputModel.Documento"  class="form-control" For="(() => clienteInputModel.Documento)" Immediate="true"/>
            }
            else
            {
                <MudTextField  Label="Nome" Variant="Variant.Filled" id="Nome" @bind-Value="clienteInputModel.Nome" class="form-control" For="(() => clienteInputModel.Nome)" Immediate="true"/>
                <MudTextField  Label="CPF" Variant="Variant.Filled" id="CPF" @bind-Value="clienteInputModel.Documento" class="form-control" For="(() => clienteInputModel.Documento)" Mask="@CpfMask" Immediate="true"/>
            }
            <MudTextField  Label="Nome Representante" Variant="Variant.Filled" id="Representante" @bind-Value="clienteInputModel.Representante" class="form-control" For="(() => clienteInputModel.Representante)" Immediate="true"/>
        </MudCardContent>
        
        <MudCardContent>
                <MudTextField Mask="@CepMask" Label="CEP" Variant="Variant.Filled" id="CEP" @bind-Value="clienteInputModel.Endereco.Cep" TextChanged="HandleCepInput" class="form-control" For="(() => clienteInputModel.Endereco.Cep)" Immediate="true"/>
                <MudTextField Label="Logradouro" Variant="Variant.Filled" id="Logradouro" @bind-Value="clienteInputModel.Endereco.Logradouro" class="form-control" For="(() => clienteInputModel.Endereco.Logradouro)" Immediate="true"/>
                <MudTextField Label="Numero" Variant="Variant.Filled" id="Numero" @bind-Value="clienteInputModel.Endereco.Numero" class="form-control" For="(() => clienteInputModel.Endereco.Numero)" Immediate="true"/>
                <MudTextField Label="Complemento" Variant="Variant.Filled" id="Complemento" @bind-Value="clienteInputModel.Endereco.Complemento" class="form-control" For="(() => clienteInputModel.Endereco.Complemento)" Immediate="true"/>
        </MudCardContent>
        
        <MudCardContent>
            <MudTextField Label="E-mail" Variant="Variant.Filled" id="Email" @bind-Value="clienteInputModel.Email" class="form-control" For="(() => clienteInputModel.Email)" Immediate="true"/>
            <MudTextField Label="Telefone" Mask="@TelefoneMask" Variant="Variant.Filled" id="Telefone" @bind-Value="clienteInputModel.Telefone" class="form-control" For="(() => clienteInputModel.Telefone)" Immediate="true"/>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" disabled="@_processing" OnClick="@HandleSubmit">
                @if (_processing)
                {
                    <MudText Class="ms-2">Enviando</MudText >
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                }
                else
                {
                    <MudText>Salvar</MudText>
                }
            </MudButton>
        </MudCardActions>


    </MudForm>
</MudCard>


@code {

    private ClienteFormValidator clienteValidator = new();
    private EnderecoFormValidator enderecoValidator = new();
    private CreateClienteInputModel clienteInputModel = new CreateClienteInputModel() {Endereco = new EnderecoInputModel()};
    private string? sucessMessage = "";
    private string? failMessage = "";
    private bool _processing = false;
    private string cepData = "nada ve irmao";

    [Parameter]
    public EventCallback<string> OnCepChanged { get; set; }

    private PatternMask TelefoneMask = new PatternMask("(00) 00000-0000") {
            CleanDelimiters = true
    };

    private PatternMask CepMask = new PatternMask("00.000-000") {
            CleanDelimiters = true
    };

    private PatternMask CpfMask = new PatternMask("000.000.000-00") {
            CleanDelimiters = true
    };

    private PatternMask CnpjMask = new PatternMask("00.000.000/0000-00") {
            CleanDelimiters = true
    };


    private async Task HandleSubmit()
    {
        _processing = true;
        var client = HttpClientFactory.CreateClient("ApiSerad"); 
        var response = await client.PostAsJsonAsync("/api/Clientes", clienteInputModel);
        _processing = false;
        if (response.IsSuccessStatusCode)
        {
            clienteInputModel = new CreateClienteInputModel() {Endereco = new EnderecoInputModel()};
            sucessMessage = "Cliente criado com sucesso!";
            return;
        }

        failMessage = await response.Content.ReadAsStringAsync();
    }

    private async Task HandleCepInput()
    {
        var cep = clienteInputModel.Endereco.Cep;
        
        if (cep is { Length: 8 }){ 
            var client = HttpClientFactory.CreateClient("ApiCepBrasilAberto");
            var response = await client.GetAsync($"v1/zipcode/{clienteInputModel.Endereco.Cep}");
            if (response.StatusCode == HttpStatusCode.OK)
            {
                var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                };
                var jsonString = await response.Content.ReadAsStringAsync();
                cepData = jsonString;
                var endereco = JsonSerializer.Deserialize<Root>(jsonString, options);
                if (endereco != null) clienteInputModel.Endereco.Logradouro = endereco.result.street;
            }
        }
        else
        {
            clienteInputModel.Endereco.Logradouro = "";
        }
    }

}