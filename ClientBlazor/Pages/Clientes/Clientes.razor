@page "/clientes"
@using System.Net
@using System.Text.Json
@using Domain.ViewModels
@inject IHttpClientFactory HttpClientFactory
@using System.Net.Http.Json


<PageTitle>Clientes</PageTitle>


<div class="d-flex justify-content-between">
    <h3></h3>
    <NavLink class="nav-link"href="clientes/cadastrar">
        <button class="btn btn-primary"> Cadastrar</button>
    </NavLink>
</div>


@if (loading == true)
{
    <p>
        <em>Loading....</em>
    </p>
}
else if (ClientesData != null && ClientesData.Length != 0)
{
    <MudTable Items="@ClientesData" Hover="@true" Bordered="@true" Striped="@true" Filter="new Func<ClienteViewModel,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Clientes</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Pesquisar" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Nome</MudTh>
            <MudTh>E-mail</MudTh>
            <MudTh>Tipo</MudTh>
            <MudTh>Documento</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nome">@context.Nome</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd DataLabel="Tipo">Pessoa @context.Tipo</MudTd>
            <MudTd DataLabel="Documento">@context.Documento</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}
else
{
    <p>
        <em>Clientes não encontrados.</em>
    </p>
}

@code {

    private bool loading = true;
    private ClienteViewModel[]? ClientesData;
    private string searchString1 = "";
    private ClienteViewModel? selectedItem1 = null;
    private bool FilterFunc1(ClienteViewModel cliente) => FilterFunc(cliente, searchString1);

    private bool FilterFunc(ClienteViewModel cliente, string searchString)
    {
        return cliente.SearchString(searchString);
    }
    protected override async Task OnInitializedAsync()
    {
        var client = HttpClientFactory.CreateClient("ApiSerad"); 
        var response = await client.GetAsync("/api/clientes");
        if (response.StatusCode == HttpStatusCode.OK)
        {
            var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };
            var jsonString = await response.Content.ReadAsStringAsync();
            
            ClientesData = 
                JsonSerializer.Deserialize<ClienteViewModel[]>(jsonString, options);
        }
        loading = false;

    }

}